obs修改名称
# 例如，如果重命名.obs中的'MSC'
slide.obs['MSC_celltype'] = slide.obs['MSC']
# 或者，如果重命名.var中的'MSC'
slide.var.rename(index={'MSC': 'MSC_gene'}, inplace=True)
adata.obs.rename(columns={'orig.ident': 'sample'}, inplace=True)

复制obs
adata.obs['celltypes'] = adata.obs['celltypist'].copy()

设置level
ordered_celltypes = ['EC1 angiogenic', 'EC2 artery', 'EC3 vein', 'Pericyte','tCAF','iCAF', 'mCAF', 'myoCAF','apCAF1', 'apCAF2', 'pCAF']
adata.obs['celltypes'] = pd.Categorical(adata.obs['celltypes'], categories=ordered_celltypes, ordered=True)

增加内容
sample_to_treatment = {
    'OS1': 'Pre-chemotherapy', 'OS2': 'Pre-chemotherapy','OS3': 'Pre-chemotherapy','OS4': 'Pre-chemotherapy','OS5': 'Pre-chemotherapy','OS6': 'Pre-chemotherapy',
    'BC10': 'Post-chemotherapy', 'BC11': 'Post-chemotherapy', 'BC16': 'Post-chemotherapy', 'BC17': 'Post-chemotherapy', 'BC2': 'Post-chemotherapy', 'BC20': 'Post-chemotherapy', 
'BC21': 'Post-chemotherapy', 'BC22': 'Post-chemotherapy', 'BC3': 'Post-chemotherapy', 'BC5': 'Post-chemotherapy', 'BC6': 'Post-chemotherapy', 
'BS3': 'Post-chemotherapy', 'BS5': 'Post-chemotherapy', 'BS14': 'Post-chemotherapy', 'BS9': 'Post-chemotherapy', 
'BS1': 'Post-chemotherapy', 'BS2': 'Post-chemotherapy', 'BS4': 'Pre-chemotherapy','BS6': 'Pre-chemotherapy','BS7': 'Pre-chemotherapy','BS12': 'Pre-chemotherapy',
}
# 使用map函数根据sample列映射到Treatment
adata.obs['Treatment'] = adata.obs['sample'].map(sample_to_treatment)
adata.obs['Treatment'].value_counts()
修改内容
adata.obs['cluster'] = adata.obs['cluster'].cat.add_categories(['cycling CAF'])
adata.obs.loc[adata.obs['leiden'] == '10', 'cluster'] = 'cycling CAF'


修改细胞名
adata.obs['orig.ident'] = adata.obs['orig.ident'].astype(str)
adata.obs.index=adata.obs['orig.ident']+'_'+adata.obs.index

提取细胞名
def extract_sample_from_index(adata):
    adata.obs['sample'] = adata.obs.index.to_series().str.split("_").str[0]
    return adata
adata=extract_sample_from_index(adata)




修改基因名
adata.var['feature_name'] = adata.var['feature_name'].astype(str)
adata.var.index=adata.var['feature_name']

##获取分类
print(adata.obs['celltypes'].unique())
cell_counts = adata.obs["majority_voting"].value_counts()
print(cell_counts)



##取亚群
selected_celltypes = ['EC1 angiogenic', 'EC2 artery', 'EC3 vein']
selected_cells = adata.obs['celltypes'].isin(selected_celltypes)
adata_subset = adata[selected_cells]

unselected_cells = ~adata.obs['celltypes'].isin(selected_celltypes)
adata_subset = adata[unselected_cells]


####
cell_counts = adata.obs['orig.ident'].value_counts()
selected_orig_ident = cell_counts[cell_counts > 10].index
adata_filtered = adata[adata.obs['orig.ident'].isin(selected_orig_ident), :]

    # 计算每个batch的细胞数
    cell_counts = adata.obs[batch_key].value_counts()

    # 找出细胞数大于min_cells的batch
    valid_batches = cell_counts[cell_counts >= min_cells].index

    # 筛选这些batch的数据
    adata_filtered = adata[adata.obs[batch_key].isin(valid_batches)].copy()
    
    # 返回筛选后的数据
    return adata_filtered
##筛选细胞数
def subset_adata_excluding_celltypes(adata, selected_celltypes, celltype_col):
    unselected_cells = ~adata.obs[celltype_col].isin(selected_celltypes)
    adata_subset = adata[unselected_cells].copy()
    return adata_subset

# Example usage:
selected_celltypes = ["OC"]
adata_subset = subset_adata_excluding_celltypes(adata, selected_celltypes, 'celltypes')
adata=adata_subset
adata= remove_small_batches(adata, 'orig.ident', min_cells=10)

###去除重复细胞
def remove_duplicate_cells(adata):
    duplicate_indices = adata.obs.index[adata.obs.index.duplicated()]
    mask = ~adata.obs.index.isin(duplicate_indices)
    adata_unique = adata[mask].copy()
    return adata_unique
adata=remove_duplicate_cells(adata)

###添加metadata
def merge_adata_metadata(adata, metadata):
    metadata.index = metadata.index.astype(str)
    common_cells = adata.obs_names.intersection(metadata.index)
    adata_filtered = adata[common_cells].copy()
    adata_filtered.obs = adata_filtered.obs.join(metadata.loc[common_cells])
    return adata_filtered
updated_adata = merge_adata_metadata(adata, metadata)






